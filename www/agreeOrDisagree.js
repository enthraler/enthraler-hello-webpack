// Generated by Haxe 3.4.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var QuestionType = { __ename__ : true, __constructs__ : ["GroupedAnswer","GroupedWeightedAnswer","FreeText"] };
QuestionType.GroupedAnswer = function(groups,defaultGroup,labelName,colors) { var $x = ["GroupedAnswer",0,groups,defaultGroup,labelName,colors]; $x.__enum__ = QuestionType; $x.toString = $estr; return $x; };
QuestionType.GroupedWeightedAnswer = function(groups) { var $x = ["GroupedWeightedAnswer",1,groups]; $x.__enum__ = QuestionType; $x.toString = $estr; return $x; };
QuestionType.FreeText = ["FreeText",2];
QuestionType.FreeText.toString = $estr;
QuestionType.FreeText.__enum__ = QuestionType;
var enthraler_HaxeTemplate = function() { };
enthraler_HaxeTemplate.__name__ = true;
var AgreeOrDisagree = function(environment) {
	this.maxRadius = 12;
	this.minRadius = 4;
	this.padding = 6;
	this.height = 300;
	this.width = 650;
	environment.container.innerHTML = "<div id=\"ui-container\">\n\t\t\t<div id=\"header\">\n\t\t\t\t<h1 id=\"title\"></h1>\n\t\t\t\t<div id=\"settings\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<select id=\"demograph-select\">\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<label for=\"radius-toggle\" title=\"If a respondant rated a question as important, we will make their circle bigger\">\n\t\t\t\t\t\t\tShow loud voices\n\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"radius-toggle\" checked />\n\t\t\t\t\t\t</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"d3-container\"></div>\n\t\t\t<div id=\"question-nav\">\n\t\t\t\t<a href=\"#\" id=\"previous-btn\"><i class=\"fa fa-chevron-left\"></i><span class=\"sr-only\">Previous Question</span></a>\n\t\t\t\t<h2 id=\"question-label\"></h2>\n\t\t\t\t<a href=\"#\" id=\"next-btn\"><i class=\"fa fa-chevron-right\"></i><span class=\"sr-only\">Next Question</span></a>\n\t\t\t</div>\n\t\t</div>";
	this.labels = { title : window.document.getElementById("title"), question : window.document.getElementById("question-label"), demograph : window.document.getElementById("demograph-select"), radius : window.document.getElementById("radius-toggle")};
	this.environment = environment;
	this.color = function(_) {
		return "white";
	};
};
AgreeOrDisagree.__name__ = true;
AgreeOrDisagree.__interfaces__ = [enthraler_HaxeTemplate];
AgreeOrDisagree.prototype = {
	get_numberOfNodes: function() {
		return this.authorData.responses.length;
	}
	,render: function(plainJsonData) {
		var jsonStr = JSON.stringify(plainJsonData);
		this.authorData = new tink_json_Parser0().parse(jsonStr);
		this.labels.title.innerText = "Steam Community Survey";
		this.setDemographicQuestionsFromData();
		this.setupDemographSelectBox();
		this.drawTheDots();
		this.setDemographicQuestion(null);
		this.toggleRadiusScaling(true);
		this.showQuestion(null);
		this.environment.requestHeightChange();
	}
	,setDemographicQuestionsFromData: function() {
		this.demographicQuestions = [null];
		this.demographLabels = new haxe_ds_IntMap();
		var i = 0;
		var _g = 0;
		var _g1 = this.authorData.questions;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			var _g2 = q.type;
			if(_g2[1] == 0) {
				var colours = _g2[5];
				var labelName = _g2[4];
				var otherName = _g2[3];
				var groups = _g2[2];
				if(labelName != null) {
					this.demographicQuestions.push(i);
					this.demographLabels.set(i,labelName);
				}
			}
			++i;
		}
	}
	,setupDemographSelectBox: function() {
		var _gthis = this;
		var selectOptions = this.demographicQuestions.map(function(i) {
			if(i == null) {
				return "<option value=\"\">Do not highlight demographics</option>";
			}
			return "<option value=\"" + i + "\">" + _gthis.demographLabels.h[i] + "</option>";
		});
		this.labels.demograph.innerHTML = selectOptions.join("");
		this.labels.demograph.addEventListener("change",function() {
			var value = _gthis.labels.demograph.value;
			_gthis.setDemographicQuestion(value == "" ? null : Std.parseInt(value));
		});
	}
	,setNumberOfGroups: function(num) {
		this.numberOfClusters = num;
		this.xScale = js_d3_D3.scale.ordinal().domain(js_d3_D3.range(num)).rangePoints([0,this.width],1);
	}
	,drawTheDots: function() {
		var _gthis = this;
		this.setNumberOfGroups(1);
		this.nodes = js_d3_D3.range(this.get_numberOfNodes()).map(function(index) {
			var i = Math.floor(Math.random() * _gthis.numberOfClusters);
			var v = (i + 1) / _gthis.numberOfClusters * -Math.log(Math.random());
			return { responseIndex : index, radius : _gthis.maxRadius, color : _gthis.color(""), tooltip : "", cx : _gthis.xScale(i), cy : _gthis.height / 2};
		});
		this.force = js_d3_D3.layout.force().nodes(this.nodes).size([this.width,this.height]);
		this.svg = js_d3_D3.select("#d3-container").append("svg").attr("width",this.width).attr("height",this.height).attr("viewBox",[0,0,this.width,this.height].join(","));
		this.updateCircles();
		this.force.gravity(0).charge(0).on("tick",$bind(this,this.tick)).start();
		var q = -1;
		var prevQuestion = null;
		prevQuestion = function() {
			if(q > 0) {
				q -= 1;
			}
			var _g = _gthis.authorData.questions[q].type;
			if(_g[1] == 2) {
				prevQuestion();
				return;
			}
			_gthis.showQuestion(q);
		};
		var prevQuestion1 = prevQuestion;
		var nextQuestion = null;
		nextQuestion = function() {
			if(q < _gthis.authorData.questions.length - 1) {
				q += 1;
			}
			var _g1 = _gthis.authorData.questions[q].type;
			if(_g1[1] == 2) {
				nextQuestion();
				return;
			}
			_gthis.showQuestion(q);
		};
		var nextQuestion1 = nextQuestion;
		window.addEventListener("keydown",function(e) {
			var _g2 = e.keyCode;
			switch(_g2) {
			case 37:
				prevQuestion1();
				break;
			case 38:
				var currentIndex = _gthis.demographicQuestions.indexOf(_gthis.demographicQuestionIndex);
				var prevIndex = currentIndex < 1 ? _gthis.demographicQuestions.length - 1 : currentIndex - 1;
				_gthis.setDemographicQuestion(_gthis.demographicQuestions[prevIndex]);
				e.preventDefault();
				break;
			case 39:
				nextQuestion1();
				break;
			case 40:
				var currentIndex1 = _gthis.demographicQuestions.indexOf(_gthis.demographicQuestionIndex);
				var nextIndex = currentIndex1 == _gthis.demographicQuestions.length - 1 ? 0 : currentIndex1 + 1;
				_gthis.setDemographicQuestion(_gthis.demographicQuestions[nextIndex]);
				e.preventDefault();
				break;
			case 82:
				_gthis.toggleRadiusScaling(!_gthis.allowRadiusScaling);
				break;
			default:
				var other = _g2;
				console.log("Keycode " + other + " is not assigned to any action");
			}
		});
		window.document.getElementById("previous-btn").addEventListener("click",prevQuestion1);
		window.document.getElementById("next-btn").addEventListener("click",nextQuestion1);
		var hammer = new Hammer(this.environment.container,null);
		hammer.on("swiperight",prevQuestion1);
		hammer.on("swipeleft",nextQuestion1);
		this.labels.radius.addEventListener("change",function(e1) {
			_gthis.toggleRadiusScaling(_gthis.labels.radius.checked);
		});
		this.environment.requestHeightChange();
	}
	,showQuestion: function(questionIndex) {
		this.questionIndex = questionIndex;
		var question = this.authorData.questions[questionIndex];
		var label = questionIndex != null ? question.question : "Survey";
		this.labels.question.innerText = label;
		this.reRender();
	}
	,toggleRadiusScaling: function(allow) {
		this.allowRadiusScaling = allow;
		this.reRender();
	}
	,setDemographicQuestion: function(questionNumber) {
		this.demographicQuestionIndex = questionNumber;
		var numGroups = 1;
		var groupsInQuestion = [""];
		var colors = null;
		if(questionNumber != null) {
			groupsInQuestion = this.getGroupsInQuestion(questionNumber);
			numGroups = groupsInQuestion.length;
			var _g = this.authorData.questions[questionNumber].type;
			if(_g[1] == 0) {
				var colorsForGroup = _g[5];
				var label = _g[4];
				var defaultGroup = _g[3];
				var groups = _g[2];
				colors = colorsForGroup;
			} else {
				colors = null;
			}
		}
		this.labels.demograph.value = questionNumber != null ? "" + questionNumber : "";
		if(this.demographLabels.h[questionNumber] == null || colors == null) {
			this.color = function(_) {
				return "#1F77B4";
			};
		} else {
			this.color = function(demographicValue) {
				if(__map_reserved[demographicValue] != null ? colors.existsReserved(demographicValue) : colors.h.hasOwnProperty(demographicValue)) {
					return __map_reserved[demographicValue] != null ? colors.getReserved(demographicValue) : colors.h[demographicValue];
				} else {
					return "white";
				}
			};
		}
		this.reRender();
	}
	,reRender: function() {
		this.updateNodes();
		this.updateCircles();
		this.updateGroupLabels();
	}
	,getGroupsInQuestion: function(questionIndex) {
		var allGroups = [];
		var question = this.authorData.questions[questionIndex];
		var addGroup = function(name) {
			if(allGroups.indexOf(name) == -1) {
				allGroups.push(name);
			}
		};
		if(question != null) {
			var _g = question.type;
			switch(_g[1]) {
			case 0:
				var defaultGroup = _g[3];
				var groups = _g[2];
				if(groups != null) {
					if(defaultGroup != null) {
						addGroup(defaultGroup);
					}
					var _g1 = 0;
					while(_g1 < groups.length) {
						var group = groups[_g1];
						++_g1;
						addGroup(group);
					}
				} else {
					var _g2 = 0;
					var _g11 = this.authorData.responses;
					while(_g2 < _g11.length) {
						var respondant = _g11[_g2];
						++_g2;
						var response = respondant[questionIndex];
						addGroup(response);
					}
				}
				break;
			case 1:
				var groups1 = _g[2];
				var _g3 = 0;
				while(_g3 < groups1.length) {
					var group1 = groups1[_g3];
					++_g3;
					addGroup(group1.group);
				}
				break;
			case 2:
				break;
			}
		} else {
			addGroup("Everyone");
		}
		return allGroups;
	}
	,updateNodes: function() {
		var _gthis = this;
		var allGroups = this.getGroupsInQuestion(this.questionIndex);
		var getResponse;
		var question = this.authorData.questions[this.questionIndex];
		if(question != null) {
			var _g = question.type;
			switch(_g[1]) {
			case 0:
				var defaultGroup = _g[3];
				var groups = _g[2];
				if(groups != null) {
					getResponse = function(response) {
						if(groups.indexOf(response) > -1) {
							return { group : response, radius : 1};
						} else if(defaultGroup != null) {
							return { group : defaultGroup, radius : 1};
						} else {
							return { group : "", radius : 0};
						}
					};
				} else {
					getResponse = function(response1) {
						return { group : response1, radius : 1};
					};
				}
				break;
			case 1:
				var groups1 = _g[2];
				getResponse = function(response2) {
					var _g1 = 0;
					while(_g1 < groups1.length) {
						var group = groups1[_g1];
						++_g1;
						if(group.value == response2) {
							return group;
						}
					}
					return { group : "Unanswered", radius : 0};
				};
				break;
			case 2:
				console.log("not handling free text yet");
				return;
			}
		} else {
			getResponse = function(_) {
				return { group : "Everyone", radius : 1};
			};
		}
		this.setNumberOfGroups(allGroups.length);
		this.nodes = this.nodes.map(function(node) {
			var respondant = _gthis.authorData.responses[node.responseIndex];
			var responseText = respondant[_gthis.questionIndex];
			if(responseText == "") {
				node.radius = 0;
				node.cx = -1;
				return node;
			}
			var response3 = getResponse(responseText);
			var groupIndex = allGroups.indexOf(response3.group);
			var demographText = respondant[_gthis.demographicQuestionIndex];
			node.cx = _gthis.xScale(groupIndex);
			node.radius = _gthis.allowRadiusScaling ? response3.radius / 3 * _gthis.maxRadius : _gthis.maxRadius / 3;
			node.tooltip = responseText != null ? responseText : "";
			if(demographText != null && demographText != "") {
				var demographQuestion = _gthis.demographLabels.h[_gthis.demographicQuestionIndex];
				node.tooltip += " [" + demographQuestion + ": " + demographText + "]";
			}
			node.color = _gthis.color(demographText);
			return node;
		});
	}
	,updateCircles: function() {
		this.circle = this.svg.selectAll("circle").data(this.nodes).attr("r",function(d) {
			return d.radius;
		}).style("fill",function(d1) {
			return d1.color;
		});
		this.circle.enter().append("circle").attr("r",function(d2) {
			return d2.radius;
		}).style("fill",function(d3) {
			return d3.color;
		}).call(this.force.drag).append("title");
		this.circle.select("title").text(function(d4) {
			return d4.tooltip;
		});
		this.circle.exit().remove();
		this.force.resume();
	}
	,updateGroupLabels: function() {
		var _gthis = this;
		var labels = this.getGroupsInQuestion(this.questionIndex);
		this.groupLabels = this.svg.selectAll("text.group-label").data(labels);
		this.groupLabels.enter().append("text").attr("class","group-label");
		this.groupLabels.exit().remove();
		var allGroups = this.getGroupsInQuestion(this.questionIndex);
		this.groupLabels.text(function(groupName) {
			return groupName;
		}).attr("x",function(groupName1) {
			return _gthis.xScale(allGroups.indexOf(groupName1));
		}).attr("y",this.height).attr("transform",function(groupName2) {
			var x = _gthis.xScale(allGroups.indexOf(groupName2));
			var y = _gthis.height;
			return "rotate(270, " + x + ", " + y + ")";
		});
	}
	,gravity: function(alpha) {
		return function(d) {
			d.y += (d.cy - d.y) * alpha;
			d.x += (d.cx - d.x) * alpha;
		};
	}
	,collide: function(alpha) {
		var _gthis = this;
		var quadtree = js_d3_D3.geom.quadtree(this.nodes);
		return function(d) {
			var r = d.radius + _gthis.maxRadius + _gthis.padding;
			var nx1 = d.x - r;
			var nx2 = d.x + r;
			var ny1 = d.y - r;
			var ny2 = d.y + r;
			quadtree.visit(function(quad,x1,y1,x2,y2) {
				var point = quad.point;
				if(point != null && point != d) {
					var x = d.x - point.x;
					var y = d.y - point.y;
					var l = Math.sqrt(x * x + y * y);
					var isSameGroup = d.cx == point.cx;
					var r1 = d.radius + point.radius + (isSameGroup ? 1 : _gthis.padding);
					if(l < r1) {
						l = (l - r1) / l * alpha;
						d.x -= x *= l;
						d.y -= y *= l;
						point.x += x;
						point.y += y;
					}
				}
				if(!(x1 > nx2 || x2 < nx1 || y1 > ny2)) {
					return y2 < ny1;
				} else {
					return true;
				}
			});
		};
	}
	,tick: function(e) {
		if(this.circle == null) {
			throw new Error("circle is null");
		}
		this.circle.each(this.gravity(0.2 * e.alpha)).each(this.collide(0.5)).attr("cx",function(d) {
			return d.x;
		}).attr("cy",function(d1) {
			return d1.y;
		}).attr("r",function(d2) {
			return d2.radius;
		}).style("fill",function(d3) {
			return d3.color;
		});
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var enthraler_Environment = function() { };
enthraler_Environment.__name__ = true;
enthraler_Environment.prototype = {
	requestHeightChange: function(requestedHeight) {
		if(window.parent == null) {
			return;
		}
		if(requestedHeight == null) {
			requestedHeight = window.document.documentElement.scrollHeight + 1;
		}
		window.parent.postMessage(JSON.stringify({ src : "" + Std.string(window.location), context : "iframe.resize", height : requestedHeight}),"*");
	}
};
var haxe_StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var tink_core_Annex = function(target) {
	this.target = target;
	this.registry = new haxe_ds_ObjectMap();
};
tink_core_Annex.__name__ = true;
var tink_core_TypedError = function(code,message,pos) {
	if(code == null) {
		code = 500;
	}
	this.code = code;
	this.message = message;
	this.pos = pos;
	this.exceptionStack = [];
	this.callStack = [];
};
tink_core_TypedError.__name__ = true;
tink_core_TypedError.withData = function(code,message,data,pos) {
	return tink_core_TypedError.typed(code,message,data,pos);
};
tink_core_TypedError.typed = function(code,message,data,pos) {
	var ret = new tink_core_TypedError(code,message,pos);
	ret.data = data;
	return ret;
};
tink_core_TypedError.ofJsError = function(e,pos) {
	return tink_core_TypedError.withData(500,e.message,e,pos);
};
tink_core_TypedError.catchExceptions = function(f,report,pos) {
	try {
		return tink_core_Outcome.Success(f());
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		return tink_core_Outcome.Failure(e.isTinkError ? e : report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e,pos) : report(e));
	}
};
tink_core_TypedError.reporter = function(code,message,pos) {
	return function(e) {
		return tink_core_TypedError.withData(code,message,e,pos);
	};
};
tink_core_TypedError.rethrow = function(any) {
	throw js__$Boot_HaxeError.wrap(any);
};
tink_core_TypedError.prototype = {
	printPos: function() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	,toString: function() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	,throwSelf: function() {
		throw new js__$Boot_HaxeError(this);
	}
};
var tink_core_NamedWith = function() { };
tink_core_NamedWith.__name__ = true;
var tink_core_Outcome = { __ename__ : true, __constructs__ : ["Success","Failure"] };
tink_core_Outcome.Success = function(data) { var $x = ["Success",0,data]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
tink_core_Outcome.Failure = function(failure) { var $x = ["Failure",1,failure]; $x.__enum__ = tink_core_Outcome; $x.toString = $estr; return $x; };
var tink_json__$Parser_SliceData = function(source,min,max) {
	this.source = source;
	this.min = min;
	this.max = max;
};
tink_json__$Parser_SliceData.__name__ = true;
var tink_json__$Parser_JsonString_$Impl_$ = {};
tink_json__$Parser_JsonString_$Impl_$.__name__ = true;
tink_json__$Parser_JsonString_$Impl_$.contains = function(this1,s) {
	var _g = this1.source.indexOf(s,this1.min);
	if(_g == -1) {
		return false;
	} else {
		var outside = _g;
		if(outside > this1.max) {
			return false;
		} else {
			var v = _g;
			return true;
		}
	}
};
tink_json__$Parser_JsonString_$Impl_$.toString = function(this1) {
	if(tink_json__$Parser_JsonString_$Impl_$.contains(this1,"\\")) {
		return JSON.parse(this1.source.substring(this1.min - 1,this1.max + 1));
	} else {
		return this1.source.substring(this1.min,this1.max);
	}
};
var tink_json_BasicParser = function() {
	this.plugins = new tink_core_Annex(this);
};
tink_json_BasicParser.__name__ = true;
tink_json_BasicParser.prototype = {
	init: function(source) {
		this.source = source;
		this.pos = 0;
		this.max = source.length;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
	}
	,parseString: function() {
		var e;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var e1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			e1 = true;
		} else {
			e1 = false;
		}
		if(!e1) {
			e = this.die("Expected string");
		} else {
			e = null;
		}
		return this.parseRestOfString();
	}
	,parseRestOfString: function() {
		return this.slice(this.skipString(),this.pos - 1);
	}
	,skipString: function() {
		var start = this.pos;
		while(true) {
			var _g = this.source.indexOf("\"",this.pos);
			if(_g == -1) {
				this.die("unterminated string",start);
			} else {
				var v = _g;
				this.pos = v + 1;
				var p = this.pos - 2;
				while(this.source.charCodeAt(p) == 92) --p;
				if((p - this.pos & 1) == 0) {
					break;
				}
			}
		}
		return start;
	}
	,parseNumber: function() {
		var $char = this.source.charCodeAt(this.pos);
		if($char == 46 || $char < 58 && $char > 47) {
			return this.doParseNumber();
		} else {
			return this.die("number expected");
		}
	}
	,doParseNumber: function() {
		return this.slice(this.skipNumber(this.source.charCodeAt(this.pos++)),this.pos);
	}
	,invalidNumber: function(start) {
		return this.die("Invalid number " + this.source.substring(start,this.pos),start);
	}
	,skipNumber: function(c) {
		var start = this.pos - 1;
		var minus = c == 45;
		var digit = !minus;
		var zero = c == 48;
		var point = false;
		var e = false;
		var pm = false;
		var end = false;
		while(true) {
			c = this.source.charCodeAt(this.pos++);
			switch(c) {
			case 43:case 45:
				if(!e || pm) {
					this.invalidNumber(start);
				}
				digit = false;
				pm = true;
				break;
			case 46:
				if(minus || point) {
					this.invalidNumber(start);
				}
				digit = false;
				point = true;
				break;
			case 48:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
					zero = true;
				}
				digit = true;
				break;
			case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				if(zero && !point) {
					this.invalidNumber(start);
				}
				if(minus) {
					minus = false;
				}
				digit = true;
				zero = false;
				break;
			case 69:case 101:
				if(minus || zero || e) {
					this.invalidNumber(start);
				}
				digit = false;
				e = true;
				break;
			default:
				if(!digit) {
					this.invalidNumber(start);
				}
				this.pos--;
				end = true;
			}
			if(end) {
				break;
			}
		}
		return start;
	}
	,slice: function(from,to) {
		return new tink_json__$Parser_SliceData(this.source,from,to);
	}
	,skipValue: function() {
		var _gthis = this;
		var _g = this.source.charCodeAt(this.pos++);
		switch(_g) {
		case 34:
			this.skipString();
			break;
		case 91:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				return;
			}
			while(true) {
				this.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp1;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp1 = true;
				} else {
					tmp1 = false;
				}
				if(!tmp1) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp2;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
				this.pos += 1;
				tmp2 = true;
			} else {
				tmp2 = false;
			}
			if(!tmp2) {
				this.die("Expected ]");
			}
			break;
		case 102:
			var tmp3;
			if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 97 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 115 && this.source.charCodeAt(this.pos + 3) == 101) {
				this.pos += 4;
				tmp3 = true;
			} else {
				tmp3 = false;
			}
			if(!tmp3) {
				this.die("Expected alse");
			}
			break;
		case 110:
			var tmp4;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 117 && this.source.charCodeAt(this.pos + 1) == 108 && this.source.charCodeAt(this.pos + 2) == 108) {
				this.pos += 3;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected ull");
			}
			break;
		case 116:
			var tmp5;
			if(this.max > this.pos + 2 && this.source.charCodeAt(this.pos) == 114 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 101) {
				this.pos += 3;
				tmp5 = true;
			} else {
				tmp5 = false;
			}
			if(!tmp5) {
				this.die("Expected rue");
			}
			break;
		case 123:
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp6;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp6 = true;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				return;
			}
			while(true) {
				if(_gthis.source.charCodeAt(_gthis.pos++) != 34) {
					_gthis.die("expected string",_gthis.pos - 1);
				}
				_gthis.skipString();
				while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
				var tmp7;
				if(_gthis.max > _gthis.pos && _gthis.source.charCodeAt(_gthis.pos) == 58) {
					_gthis.pos += 1;
					while(_gthis.pos < _gthis.max && _gthis.source.charCodeAt(_gthis.pos) < 33) _gthis.pos++;
					tmp7 = true;
				} else {
					tmp7 = false;
				}
				if(!tmp7) {
					_gthis.die("Expected :");
				}
				_gthis.skipValue();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp8;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp8 = true;
				} else {
					tmp8 = false;
				}
				if(!tmp8) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp9;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				tmp9 = true;
			} else {
				tmp9 = false;
			}
			if(!tmp9) {
				this.die("Expected }");
			}
			break;
		default:
			var $char = _g;
			if($char == 46 || $char < 58 && $char > 47) {
				this.skipNumber($char);
			} else {
				this.invalidChar($char);
			}
		}
	}
	,invalidChar: function(c) {
		return this.die("invalid char " + StringTools.hex(c,2),this.pos - 1);
	}
	,die: function(s,pos,end) {
		if(pos == null) {
			pos = this.pos;
			end = pos;
		} else if(end == null) {
			end = this.pos;
		}
		if(end <= pos) {
			end = pos + 1;
		}
		var range = end > pos + 1 ? "characters " + pos + " - " + end : "character " + pos;
		var clip = function(s1,maxLength,left) {
			if(s1.length > maxLength) {
				if(left) {
					return "... " + HxOverrides.substr(s1,s1.length - maxLength,null);
				} else {
					return HxOverrides.substr(s1,0,maxLength) + " ...";
				}
			} else {
				return s1;
			}
		};
		var center = pos + end >> 1;
		var context = clip(this.source.substring(0,pos),20,true) + "  ---->  " + clip(this.source.substring(pos,center),20,false) + clip(this.source.substring(center,end),20,true) + "  <----  " + clip(this.source.substring(end),20,false);
		return tink_core_TypedError.withData(422,s + (" at " + range + " in " + context),{ source : this.source, start : pos, end : end},{ fileName : "Parser.hx", lineNumber : 327, className : "tink.json.BasicParser", methodName : "die"}).throwSelf();
	}
};
var tink_json_Parser0 = function() {
	tink_json_BasicParser.call(this);
};
tink_json_Parser0.__name__ = true;
tink_json_Parser0.__super__ = tink_json_BasicParser;
tink_json_Parser0.prototype = $extend(tink_json_BasicParser.prototype,{
	parse0: function() {
		var _gthis = this;
		var v_questions = null;
		var hasv_questions = false;
		var v_responses = null;
		var hasv_responses = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("responses".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "responses") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_responses1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_responses1 = true;
					} else {
						v_responses1 = false;
					}
					if(!v_responses1) {
						this.die("Expected [");
					}
					var __ret = [];
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_responses2;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_responses2 = true;
					} else {
						v_responses2 = false;
					}
					if(!v_responses2) {
						while(true) {
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_responses3;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_responses3 = true;
							} else {
								v_responses3 = false;
							}
							if(!v_responses3) {
								this.die("Expected [");
							}
							var __ret1 = [];
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_responses4;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_responses4 = true;
							} else {
								v_responses4 = false;
							}
							if(!v_responses4) {
								while(true) {
									__ret1.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									var v_responses5;
									if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
										this.pos += 1;
										while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
										v_responses5 = true;
									} else {
										v_responses5 = false;
									}
									if(!v_responses5) {
										break;
									}
								}
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_responses6;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_responses6 = true;
								} else {
									v_responses6 = false;
								}
								if(!v_responses6) {
									this.die("Expected ]");
								}
							}
							__ret.push(__ret1);
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_responses7;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_responses7 = true;
							} else {
								v_responses7 = false;
							}
							if(!v_responses7) {
								break;
							}
						}
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_responses8;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_responses8 = true;
						} else {
							v_responses8 = false;
						}
						if(!v_responses8) {
							this.die("Expected ]");
						}
					}
					v_responses = __ret;
					hasv_responses = true;
				} else if("questions".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "questions") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_questions1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_questions1 = true;
					} else {
						v_questions1 = false;
					}
					if(!v_questions1) {
						this.die("Expected [");
					}
					var __ret2 = [];
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_questions2;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_questions2 = true;
					} else {
						v_questions2 = false;
					}
					if(!v_questions2) {
						while(true) {
							__ret2.push(this.parse1());
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_questions3;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_questions3 = true;
							} else {
								v_questions3 = false;
							}
							if(!v_questions3) {
								break;
							}
						}
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_questions4;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_questions4 = true;
						} else {
							v_questions4 = false;
						}
						if(!v_questions4) {
							this.die("Expected ]");
						}
					}
					v_questions = __ret2;
					hasv_questions = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { questions : hasv_questions ? v_questions : __missing__("questions"), responses : hasv_responses ? v_responses : __missing__("responses")};
	}
	,parse1: function() {
		var _gthis = this;
		var v_question = null;
		var hasv_question = false;
		var v_type = null;
		var hasv_type = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("type".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "type") {
					v_type = this.parse2();
					hasv_type = true;
				} else if("question".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "question") {
					v_question = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_question = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { question : hasv_question ? v_question : __missing__("question"), type : hasv_type ? v_type : __missing__("type")};
	}
	,parse2: function() {
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 34) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _g = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseRestOfString());
			if(_g == "FreeText") {
				return QuestionType.FreeText;
			} else {
				var invalid = _g;
				throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Invalid constructor " + invalid,{ fileName : "GenReader.hx", lineNumber : 302, className : "tink.json.Parser0", methodName : "parse2"}));
			}
		} else {
			var __ret = this.parse4();
			var o = __ret.GroupedAnswer;
			if(o != null) {
				return QuestionType.GroupedAnswer(o.groups,o.defaultGroup,o.labelName,o.colors);
			} else {
				var o1 = __ret.GroupedWeightedAnswer;
				if(o1 != null) {
					return QuestionType.GroupedWeightedAnswer(o1.groups);
				} else {
					throw new js__$Boot_HaxeError(new tink_core_TypedError(422,"Cannot process " + Std.string(__ret),{ fileName : "GenReader.hx", lineNumber : 291, className : "tink.json.Parser0", methodName : "parse2"}));
				}
			}
		}
	}
	,parse3: function() {
		var _gthis = this;
		var v_group = null;
		var hasv_group = false;
		var v_radius = .0;
		var hasv_radius = false;
		var v_value = null;
		var hasv_value = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("value".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "value") {
					v_value = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_value = true;
				} else if("radius".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "radius") {
					var this1 = this.parseNumber();
					v_radius = parseFloat(this1.source.substring(this1.min,this1.max));
					hasv_radius = true;
				} else if("group".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "group") {
					v_group = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					hasv_group = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { group : hasv_group ? v_group : __missing__("group"), radius : hasv_radius ? v_radius : __missing__("radius"), value : hasv_value ? v_value : __missing__("value")};
	}
	,parse4: function() {
		var _gthis = this;
		var v_GroupedAnswer = null;
		var v_GroupedWeightedAnswer = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("GroupedWeightedAnswer".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "GroupedWeightedAnswer") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_GroupedWeightedAnswer1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_GroupedWeightedAnswer1 = true;
					} else {
						v_GroupedWeightedAnswer1 = false;
					}
					if(v_GroupedWeightedAnswer1) {
						v_GroupedWeightedAnswer = null;
					} else {
						v_GroupedWeightedAnswer = this.parse6();
					}
				} else if("GroupedAnswer".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "GroupedAnswer") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_GroupedAnswer1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_GroupedAnswer1 = true;
					} else {
						v_GroupedAnswer1 = false;
					}
					if(v_GroupedAnswer1) {
						v_GroupedAnswer = null;
					} else {
						v_GroupedAnswer = this.parse5();
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { GroupedAnswer : v_GroupedAnswer, GroupedWeightedAnswer : v_GroupedWeightedAnswer};
	}
	,parse5: function() {
		var _gthis = this;
		var v_colors = null;
		var v_defaultGroup = null;
		var v_groups = null;
		var v_labelName = null;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("labelName".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "labelName") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_labelName1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_labelName1 = true;
					} else {
						v_labelName1 = false;
					}
					if(v_labelName1) {
						v_labelName = null;
					} else {
						v_labelName = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("groups".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "groups") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_groups1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_groups1 = true;
					} else {
						v_groups1 = false;
					}
					if(v_groups1) {
						v_groups = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups2 = true;
						} else {
							v_groups2 = false;
						}
						if(!v_groups2) {
							this.die("Expected [");
						}
						var __ret = [];
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups3 = true;
						} else {
							v_groups3 = false;
						}
						if(!v_groups3) {
							while(true) {
								__ret.push(tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString()));
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_groups4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_groups4 = true;
								} else {
									v_groups4 = false;
								}
								if(!v_groups4) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_groups5;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_groups5 = true;
							} else {
								v_groups5 = false;
							}
							if(!v_groups5) {
								this.die("Expected ]");
							}
						}
						v_groups = __ret;
					}
				} else if("defaultGroup".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "defaultGroup") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_defaultGroup1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_defaultGroup1 = true;
					} else {
						v_defaultGroup1 = false;
					}
					if(v_defaultGroup1) {
						v_defaultGroup = null;
					} else {
						v_defaultGroup = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
					}
				} else if("colors".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "colors") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_colors1;
					if(this.max > this.pos + 3 && this.source.charCodeAt(this.pos) == 110 && this.source.charCodeAt(this.pos + 1) == 117 && this.source.charCodeAt(this.pos + 2) == 108 && this.source.charCodeAt(this.pos + 3) == 108) {
						this.pos += 4;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_colors1 = true;
					} else {
						v_colors1 = false;
					}
					if(v_colors1) {
						v_colors = null;
					} else {
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_colors2;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_colors2 = true;
						} else {
							v_colors2 = false;
						}
						if(!v_colors2) {
							this.die("Expected [");
						}
						var __ret1 = new haxe_ds_StringMap();
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_colors3;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_colors3 = true;
						} else {
							v_colors3 = false;
						}
						if(!v_colors3) {
							while(true) {
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_colors4;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_colors4 = true;
								} else {
									v_colors4 = false;
								}
								if(!v_colors4) {
									this.die("Expected [");
								}
								var k = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								var e;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var e1;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									e1 = true;
								} else {
									e1 = false;
								}
								if(!e1) {
									e = this.die("Expected ,");
								} else {
									e = null;
								}
								var v = tink_json__$Parser_JsonString_$Impl_$.toString(this.parseString());
								if(__map_reserved[k] != null) {
									__ret1.setReserved(k,v);
								} else {
									__ret1.h[k] = v;
								}
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_colors5;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_colors5 = true;
								} else {
									v_colors5 = false;
								}
								if(!v_colors5) {
									this.die("Expected ]");
								}
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								var v_colors6;
								if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
									this.pos += 1;
									while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
									v_colors6 = true;
								} else {
									v_colors6 = false;
								}
								if(!v_colors6) {
									break;
								}
							}
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_colors7;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_colors7 = true;
							} else {
								v_colors7 = false;
							}
							if(!v_colors7) {
								this.die("Expected ]");
							}
						}
						v_colors = __ret1;
					}
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { colors : v_colors, defaultGroup : v_defaultGroup, groups : v_groups, labelName : v_labelName};
	}
	,parse6: function() {
		var _gthis = this;
		var v_groups = null;
		var hasv_groups = false;
		var __start__ = this.pos;
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 123) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			this.die("Expected {");
		}
		while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
		var tmp1;
		if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
			this.pos += 1;
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			tmp1 = true;
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			while(true) {
				var __name__ = this.parseString();
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp2;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 58) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp2 = true;
				} else {
					tmp2 = false;
				}
				if(!tmp2) {
					this.die("Expected :");
				}
				if("groups".length == __name__.max - __name__.min && __name__.source.substring(__name__.min,__name__.max) == "groups") {
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_groups1;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 91) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_groups1 = true;
					} else {
						v_groups1 = false;
					}
					if(!v_groups1) {
						this.die("Expected [");
					}
					var __ret = [];
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					var v_groups2;
					if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
						this.pos += 1;
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						v_groups2 = true;
					} else {
						v_groups2 = false;
					}
					if(!v_groups2) {
						while(true) {
							__ret.push(this.parse3());
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							var v_groups3;
							if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
								this.pos += 1;
								while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
								v_groups3 = true;
							} else {
								v_groups3 = false;
							}
							if(!v_groups3) {
								break;
							}
						}
						while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
						var v_groups4;
						if(this.max > this.pos && this.source.charCodeAt(this.pos) == 93) {
							this.pos += 1;
							while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
							v_groups4 = true;
						} else {
							v_groups4 = false;
						}
						if(!v_groups4) {
							this.die("Expected ]");
						}
					}
					v_groups = __ret;
					hasv_groups = true;
				} else {
					this.skipValue();
				}
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				var tmp3;
				if(this.max > this.pos && this.source.charCodeAt(this.pos) == 44) {
					this.pos += 1;
					while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
					tmp3 = true;
				} else {
					tmp3 = false;
				}
				if(!tmp3) {
					break;
				}
			}
			while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
			var tmp4;
			if(this.max > this.pos && this.source.charCodeAt(this.pos) == 125) {
				this.pos += 1;
				while(this.pos < this.max && this.source.charCodeAt(this.pos) < 33) this.pos++;
				tmp4 = true;
			} else {
				tmp4 = false;
			}
			if(!tmp4) {
				this.die("Expected }");
			}
		}
		var __missing__ = function(field) {
			return _gthis.die("missing field \"" + field + "\"",__start__);
		};
		return { groups : hasv_groups ? v_groups : __missing__("groups")};
	}
	,parse: function(source) {
		this.init(source);
		return this.parse0();
	}
});
var tink_json_Value = { __ename__ : true, __constructs__ : ["VNumber","VString","VNull","VBool","VArray","VObject"] };
tink_json_Value.VNumber = function(f) { var $x = ["VNumber",0,f]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VString = function(s) { var $x = ["VString",1,s]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VNull = ["VNull",2];
tink_json_Value.VNull.toString = $estr;
tink_json_Value.VNull.__enum__ = tink_json_Value;
tink_json_Value.VBool = function(b) { var $x = ["VBool",3,b]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VArray = function(a) { var $x = ["VArray",4,a]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
tink_json_Value.VObject = function(a) { var $x = ["VObject",5,a]; $x.__enum__ = tink_json_Value; $x.toString = $estr; return $x; };
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$global.define(["cdnjs/d3/3.5.17/d3.min","cdnjs/hammer.js/2.0.8/hammer.min","css!agreeOrDisagree.css","css!cdnjs/font-awesome/4.7.0/css/font-awesome.css"],function(js_d3_D3,Hammer,_,_1) {
	$global.js_d3_D3 = js_d3_D3;
	$global.Hammer = Hammer;
	return AgreeOrDisagree;
});
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
haxe_ds_ObjectMap.count = 0;
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=agreeOrDisagree.js.map